/**
 * Write a description of CaesarBreaker here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
import edu.duke.*;

public class CaesarBreaker {
    public int[] countLetters(String message){
        String alph = "abcdefghijklmnopqrstuvwxyz";
        int[] counts = new int[26];
        for(int k=0; k<=message.length()-1; k++){
            char ch = Character.toLowerCase(message.charAt(k));
            int dex = alph.indexOf(ch);
            if(dex != -1){
                counts[dex] += 1;
            }
        }
        for(int k=0;k<=counts.length-1;k++){
            System.out.println("<"+counts[k]+">");
        }
        return counts;
    }
    public int maxIndex(int[] vals){
        int maxDex = 0;
        for(int k=0; k<vals.length; k++){
            if(vals[k]>vals[maxDex]){
                maxDex = k;
            }
        }
        return maxDex;
    }
    public void testmaxIndex(){
        int[] arr = new int[]{1,2,3};
        System.out.println(maxIndex(arr));
    }
    public String decrypt(String encrypted){
        CaesarCipher cc = new CaesarCipher();
        int[] freqs = countLetters(encrypted);
        int maxDex = maxIndex(freqs);
        int dkey = maxDex - 4;
        if(maxDex < 4){
            dkey = 26-(4-maxDex);
        }
        String message = cc.encrypt(encrypted, 26 - dkey);
        System.out.println("The key is "+dkey);
        System.out.println(message);
        return message;
    }
    public void testDecrypt(){
        String message = "O gs gt ojouz, gtj ngbk tu sutke";
        System.out.println(decrypt(message));
    }
    public String halfOfString(String message, int start){
        String str = "";
        for(int k=start; k<message.length()-1; k=k+2){
            str=str+message.charAt(k);
        }
        return str;
    }
    public void testhalfOfString(){
        String msg = "haha dabendan";
        int number = 1;
        System.out.println(halfOfString(msg, number));
    }
    public int getKey(String s){
        int maxidx = maxIndex(countLetters(s));
        int dkey = 0;
        dkey = maxidx-4;
        if(maxidx < 4){
            dkey = 26-(4-maxidx);
        }
        return dkey;
    }
    public String decryptTwoKeys(String encrypted){
        CaesarCipher cc = new CaesarCipher();
        String str1 = halfOfString(encrypted, 0);
        String str2 = halfOfString(encrypted, 1);
        int key1 = getKey(str1);
        int key2 = getKey(str2);
        System.out.println("The two keys found are " + key1 + "and " + key2);
        String msg = cc.encryptTwoKeys(encrypted, 26-key1, 26-key2);
        System.out.println("The encrypted message is " + msg);
        return msg;
    }
    public void testdecryptTwoKeys(){
        FileResource fr = new FileResource(); 
        String message = fr.asString(); 
        System.out.println(decryptTwoKeys(message));
    }
}        
